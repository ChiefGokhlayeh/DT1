-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2004 Altera Corporation
-- Any  megafunction  design,  and related netlist (encrypted  or  decrypted),
-- support information,  device programming or simulation file,  and any other
-- associated  documentation or information  provided by  Altera  or a partner
-- under  Altera's   Megafunction   Partnership   Program  may  be  used  only
-- to program  PLD  devices (but not masked  PLD  devices) from  Altera.   Any
-- other  use  of such  megafunction  design,  netlist,  support  information,
-- device programming or simulation file,  or any other  related documentation
-- or information  is prohibited  for  any  other purpose,  including, but not
-- limited to  modification,  reverse engineering,  de-compiling, or use  with
-- any other  silicon devices,  unless such use is  explicitly  licensed under
-- a separate agreement with  Altera  or a megafunction partner.  Title to the
-- intellectual property,  including patents,  copyrights,  trademarks,  trade
-- secrets,  or maskworks,  embodied in any such megafunction design, netlist,
-- support  information,  device programming or simulation file,  or any other
-- related documentation or information provided by  Altera  or a megafunction
-- partner, remains with Altera, the megafunction partner, or their respective
-- licensors. No other licenses, including any licenses needed under any third
-- party's intellectual property, are provided herein.


-- Generated by Quartus II Version 4.0 (Build Build 190 1/28/2004)
-- Created on Sun Aug 29 15:30:57 2004

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_BIT.all;


--  Digitaltechnik 2
--  (c) 2007 R.Keller, W.Lindermeir, W.Zimmermann
--  Hochschule Esslingen
--  Letzte Aenderung: W. Lindermeir, 11/07


ENTITY DEBOUNCE IS
	GENERIC(width : natural := 1 );
    PORT (
          clk       : IN STD_LOGIC;
          orig      : IN STD_LOGIC;  -- active low
          debounced : OUT STD_LOGIC);
END DEBOUNCE;

ARCHITECTURE arch OF DEBOUNCE IS

-- Funktion des Entprellers:
-- das Signal orig kommt von einem Taster
--                      Taster nicht gedrueckt: orig = '1'
--                      Tasster gedrueckt:              orig = '0'
-- Falls der Taster gedrueckt wird, wird für die Dauer eines
-- Taktzyklus von clk das Signal debounced auf '0' gesetzt.
-- Stationaer ist das Signal debounced immer auf '1'

subtype counttype_std is STD_LOGIC_VECTOR (width DOWNTO 0);
SIGNAL cnt : counttype_std;
subtype counttype_bit is BIT_VECTOR (width DOWNTO 0);
constant one_before_end : counttype_bit := (0 => '0', others => '1');

BEGIN
PROCESS (clk)
  constant all_zeros : counttype_bit := (others => '0');
  constant all_ones  : counttype_bit := (others => '1');
  variable cnt_bit : counttype_bit;
BEGIN
  IF (clk'EVENT AND Clk = '1') THEN
    IF (orig = '1') THEN   -- inactive
      cnt_bit := all_zeros;
    ELSIF (cnt_bit /= all_ones) THEN
      cnt_bit := bit_vector(UNSIGNED(cnt_bit) + 1);
    END IF;
  END IF;
  cnt <= To_StdLogicVector(cnt_bit);
END PROCESS;

-- output
PROCESS (cnt)
BEGIN
  IF (cnt = to_stdlogicvector(one_before_end)) THEN
    debounced <= '0';
  ELSE
    debounced <= '1';
  END IF;
END PROCESS;
END arch;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
--  Entity Declaration

--  Digitaltechnik 2
--  (c) 2007 R.Keller, W.Lindermeir, W.Zimmermann
--  Hochschule Esslingen
--  Letzte Aenderung: W. Lindermeir, 11/07


ENTITY Entpreller IS 
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	GENERIC(width : natural := 1 );
	PORT
	(
		clk : IN STD_LOGIC;
		reset_n_button : IN STD_LOGIC;
		next_stim_n_button : IN STD_LOGIC;
		prev_stim_n_button : IN STD_LOGIC;
		reset_n : OUT STD_LOGIC;
		next_stim_n : OUT STD_LOGIC;
		prev_stim_n : OUT STD_LOGIC
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!
	
END Entpreller;

--  Architecture Body

ARCHITECTURE Entpreller_architecture OF Entpreller IS
	
BEGIN

deb0: entity work.DEBOUNCE
      generic map(width => width)
      port map(clk => clk, orig => reset_n_button, debounced => reset_n);

deb1: entity work.DEBOUNCE
      generic map(width => width)
      port map(clk => clk, orig => next_stim_n_button, debounced => next_stim_n);

deb2: entity work.DEBOUNCE
      generic map(width => width)
      port map(clk => clk, orig => prev_stim_n_button, debounced => prev_stim_n);

END Entpreller_architecture;






